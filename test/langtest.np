#!bin/np

new v1 = 1
assert(v1 == 1 'variable assignment')
{
	new v1 = 2
	assert(v1 == 2 'block-local scope')
}
assert(v1 == 1 'upval scope')

new v2 = (:)
assert( v2:size() == 0 'list:size() 0 length expected' )
assert( size(v2) == 0 'baselib size function expected' )
v2:add(1)
assert( v2:size() == 1 'list:size() 1 length expected ' )
assert( v2:iAdd(1):size() == 2 'immutable add size() 2 expected' )
v2:concat(: 100 20 30 ble = 'ba')
assert( v2:size() == 4 ':size() 4 expected after concat ' )
assert( v2:keyCount() == 1 ':keyCount() 1 expected after concat ' )
v2:sort('number')
assert( v2:toString() == ((: 1 20 30 100 ble="ba" )):toString() )
v2:reverse()
assert( v2:toString() == ((: 100 30 20 1 ble="ba" )):toString() )
v2:clear()
assert( v2:toString() == ((: ble = 'ba')):toString() )

new l1 = (: 1 2 3)
new l1Events = (: bla = { l | => l:toString() }) << list
new l2 = l1Events:create(l1)
assert( l2:bla() == '(: 1 2 3 )' 'basic list:create()')
l1 += 4
assert( l2:bla() != l1:toString() 'list:create() data copy')

-- list size tests
new lt1 = (:)
for a = 1,10000 lt1:add(a);
assert( lt1:size() == 10000 'lt1:size() 10000 expected' )

-- nil events and custom handlers
new lt2 = (: 1 2 3)
assert( lt2.foo.bar == nil 'nil chain should evaluate to nil' )
lt2.nonExistent:someBogusCall() -- should be OK
root.sys.trapNilEvent = { | lt2.nilEventHandled = true }
lt2.nonExistent2:someBogusCall2() -- should be going through the new nilEvent handler
assert( lt2.nilEventHandled 'sys.nilEvent not handled' )



print('- all tests passed');