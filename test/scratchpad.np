new t = (: 1 2 3 4 n = 1 foo = false bar = 'bl"ub
b' sub = (: 10 20 30) )

new jsonEncode = { obj |
	new doSerialize
	
	new serializers = (:
    
		number = { n | => n }
    
		string = { s | => convert.quote(s) }
		
		[nil] = { | => 'null' }
		
		boolean = { b | if(b) => 'true' else => 'false' }
		
	  list = { l | 
		  new items = (:)
			if(l:keyCount() > 0) {
			  l:each{ v k |
				  items += convert.quote(k) << ':' << doSerialize(v)
					}
				=> '{ ' << items:join(', ') << ' }'	
				}
			else {
			  l:items{ v |
				  items += doSerialize(v)
					}
				=> '[ ' << items:join(', ') << ' ]'
				}
	    }
			
	  )
	
	doSerialize = { o |
	  => serializers[type(o)](o)
		}
	
  => doSerialize(obj)
  }

new jsonDecode = { str |
	new items = convert.tokenize(str)
	new itemIndex = 1
	new current = items[1]
	new next = { | new prev = current; 
	  itemIndex += 1; current = items[itemIndex]; 
		=> prev }
	new consumeNext = { v | 
	  next() 
	  if(current!=v) 
		  raise(v << ' expected in token ' << itemIndex << " but " << current << " found.") 
		else 
			=> next() 
		}

	new expr, exprObj, exprList, exprString
	
	exprString = { |
	  => convert.unquote(next())
		}
	
  exprList = { |
		=> (:)
	  }
	
	exprObj = { |
		new result = (:)
		while(current && current != '}') {
		  new key = convert.unquote(current);
			consumeNext(':')
			result[key] = expr()
			consumeNext(',')
		}
		=> result
		}

	expr = { |
		if(current == '{') 
		  => exprObj(next())
		elseif(current == '[') 
			=> exprList(next())
		elseif(current:copy(1,1) == '"') 
			=> exprString()
		else 
			=> next()
		}
	
	=> expr()
  }

new json = jsonEncode(t)
print(json)
print(jsonDecode(json))

