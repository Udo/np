request.header.set 'content-type' 'text/plain';

println "np automated tests";
println "------------------------";
println; 

global.passCount = 0;
global.failCount = 0;

expect = { testName f ex |
  if(f == ex) 
    { global.passCount = global.passCount + 1;  } 
    { global.failCount = global.failCount + 1; unsafeprint testName ' failed ( ' ex ' != ' f ' ) '; println; } 
  };
  
expect 'basic equality' 0 0;

expect 'math and concat' ({
    thingsThatAreAwesome = 'cats';
    magicNumber = 40 + 2;
    return (cat magicNumber ' ' thingsThatAreAwesome)
  }) '42 cats';

expect 'function parameters' ({ 
    f = { n | n*n };
    (f 2)
  }) 4;
  
expect 'named params' ({
  f = { return (cat 'Hi, my ' _pname ' is ' (pop) '.'); };
  f #pname:'name' 'Bob'
  }) 'Hi, my name is Bob.';
  
expect '(cat)' ({
  cat 'OMG' "it's" 'full' 'of' 'cats' #sep:' '
  }) "OMG it's full of cats";
  
expect 'container variable' ({
  v = 4;
  v.f = { return container*container };
  v.f
  }) 16;

expect 'list definition' ({
  (list 'apples' 'oranges')
  }) "(list 'apples' 'oranges')";
  
expect 'list accessor' ({
  (list 'apples' 'oranges')::0
  }) "apples";
  
expect 'nested objects' ({
  l = (list 1 2 3);
  m = (map #a:l #b:(list 4 5 6));
  (string m)
  }) "{b=(list 4 5 6), a=(list 1 2 3)}";

println;
println "------------------------";
println 'Passed: ' global.passCount;
println 'Failed: ' global.failCount;