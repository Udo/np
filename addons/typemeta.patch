--- src/lapi.c	2012-12-03 15:19:43.922000000 -0000
+++ src/lapi.c	2012-12-04 14:55:18.807000000 -0000
@@ -804,6 +804,24 @@
   lua_unlock(L);
 }

+#if defined(JH_LUA_TYPEMETA)
+LUA_API int lua_settypemt (lua_State *L, int type) {
+	Table *mt;
+	lua_lock(L);
+	api_checknelems(L, 1);
+	api_check(L, ((type >= 0) && (type < LUA_NUMTAGS)), "invalid type");
+	if (ttisnil(L->top - 1))
+		mt = NULL;
+	else {
+		api_check(L, ttistable(L->top - 1), "table expected");
+		mt = hvalue(L->top - 1);
+	}
+	G(L)->mt[type] = mt;
+	L->top--;
+	lua_unlock(L);
+	return 1;
+}
+#endif

 LUA_API int lua_setmetatable (lua_State *L, int objindex) {
   TValue *obj;

--- src/lstring.c	2012-12-03 15:19:43.907000000 -0000
+++ src/lstring.c	2012-12-04 11:25:29.390000000 -0000
@@ -178,7 +178,15 @@
     luaM_toobig(L);
   u = &luaC_newobj(L, LUA_TUSERDATA, sizeof(Udata) + s, NULL, 0)->u;
   u->uv.len = s;
+#if defined(JH_LUA_TYPEMETA)
+  u->uv.metatable = G(L)->mt[LUA_TUSERDATA];
+  if (u->uv.metatable) {
+	luaC_objbarrier(L, u, u->uv.metatable);
+    luaC_checkfinalizer(L, (GCObject*)u, u->uv.metatable);
+  }
+#else
   u->uv.metatable = NULL;
+#endif
   u->uv.env = e;
   return u;
 }

--- src/ltable.c	2012-12-03 15:19:43.829000000 -0000
+++ src/ltable.c	2012-12-04 11:14:34.323000000 -0000
@@ -367,7 +367,15 @@

 Table *luaH_new (lua_State *L) {
   Table *t = &luaC_newobj(L, LUA_TTABLE, sizeof(Table), NULL, 0)->h;
+#if defined(JH_LUA_TYPEMETA)
+  t->metatable = G(L)->mt[LUA_TTABLE];
+  if (t->metatable) {
+        luaC_objbarrierback(L, (GCObject*)t, t->metatable);
+        luaC_checkfinalizer(L, (GCObject*)t, t->metatable);
+  }
+#else
   t->metatable = NULL;
+#endif
   t->flags = cast_byte(~0);
   t->array = NULL;
   t->sizearray = 0;

--- src/ltablib.c	2012-12-03 15:19:43.969000000 -0000
+++ src/ltablib.c	2012-12-04 09:30:05.464000000 -0000
@@ -270,6 +270,19 @@
   {NULL, NULL}
 };

+#ifndef JH_LUA_TYPEMETA
+#undef JH_LUA_TABLECLASS
+#endif
+#if defined(JH_LUA_TABLECLASS)
+static void createmetatable (lua_State *L) {
+  lua_createtable(L, 0, 1);  /* table to be type metatable for tables */
+  lua_pushvalue(L, -1);      /* copy table */
+  lua_settypemt(L, LUA_TTABLE);   /* set table as type metatable for tables */
+  lua_pushvalue(L, -2);      /* get table library */
+  lua_setfield(L, -2, "__index");  /* metatable.__index = table */
+  lua_pop(L, 1);			 /* pop metatable */
+}
+#endif

 LUAMOD_API int luaopen_table (lua_State *L) {
   luaL_newlib(L, tab_funcs);
@@ -278,6 +291,9 @@
   lua_getfield(L, -1, "unpack");
   lua_setglobal(L, "unpack");
 #endif
+#if defined(JH_LUA_TABLECLASS)
+  createmetatable(L);
+#endif
   return 1;
 }

--- src/lua.h	2012-12-03 15:19:43.922000000 -0000
+++ src/lua.h	2012-12-04 14:55:18.823000000 -0000
@@ -239,6 +239,9 @@
 LUA_API int   (lua_setmetatable) (lua_State *L, int objindex);
 LUA_API void  (lua_setuservalue) (lua_State *L, int idx);

+#if defined(JH_LUA_TYPEMETA)
+LUA_API int   (lua_settypemt) (lua_State *L, int type);
+#endif

 /*
 ** 'load' and 'call' functions (load and run Lua code)

 --- src/ldblib.c	2012-12-03 15:19:43.797000000 -0000
+++ src/ldblib.c	2012-12-06 12:18:01.150000000 -0000
@@ -47,6 +47,23 @@
 }
 
 
+#if defined(JH_LUA_TYPEMETA)
+static char* db_types[] = {"nil","boolean","lightuserdata",
+	"number","string","table","function","userdata","thread",NULL};
+
+static int db_settypemt (lua_State *L) {
+  int ty = luaL_checkoption(L, 1, NULL, db_types);
+  int t = lua_type(L, 2);
+  luaL_argcheck(L, t == LUA_TNIL || t == LUA_TTABLE, 2,
+                    "nil or table expected");
+  lua_remove(L, 1);
+  lua_settop(L, 1);
+  lua_settypemt(L, ty);
+  return 0;
+}
+
+
+#endif
 static int db_getuservalue (lua_State *L) {
   if (lua_type(L, 1) != LUA_TUSERDATA)
     lua_pushnil(L);
@@ -385,6 +402,9 @@
   {"sethook", db_sethook},
   {"setlocal", db_setlocal},
   {"setmetatable", db_setmetatable},
+#if defined(JH_LUA_TYPEMETA)
+  {"settypemt", db_settypemt},
+#endif
   {"setupvalue", db_setupvalue},
   {"traceback", db_traceback},
   {NULL, NULL}
