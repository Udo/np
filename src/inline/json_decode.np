=> { str |
	new items = convert.tokenize(str)
	new itemIndex = 1
	new current = items[1]
	new next = { | new prev = current; 
	  itemIndex += 1; current = items[itemIndex]; 
		=> prev }
	new consumeNext = { v | 
	  if(current!=v) 
			=> false
		else 
			=> next() 
		}

	new expr, exprObj, exprList, exprString
	
	exprString = { |
	  => convert.unquote(next())
		}
	
  exprList = { |
		new result = (:)
		while(current && current != ']') {
			result += expr()
			consumeNext(',')
		}
		consumeNext(']')
		=> result
	  }
	
	exprObj = { |
		new result = (:)
		while(current && current != '}') {
		  new key = convert.unquote(current);
			next(); consumeNext(':')
			result[key] = expr()
			consumeNext(',')
		}
		consumeNext('}')
		=> result
		}

	expr = { |
		if(current == '{') 
		  => exprObj(next())
		elseif(current == '[') 
			=> exprList(next())
		elseif(current:copy(1,1) == '"') 
			=> exprString()
  	elseif(current == 'false')
			=> false
	 	elseif(current == 'true')
  		=> true
  	elseif(current == 'null')
			=> nil
		else 
			=> convert.toNumber(next())
		}
	
	=> expr()
  }